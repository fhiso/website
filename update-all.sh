#!/bin/sh

set -e

ROOT=$HOME

# To override the directory the site is built in, create a file called
# local-settings.sh in this directory.
if [ -e $(dirname $0)/local-settings.sh ] ; then
    . $(dirname $0)/local-settings.sh
fi

# Note that www-build is the document root for http://test.tech.fhiso.org/
BUILD=$ROOT/www-build
OUT=$ROOT/www

# Git repositories we use
REPOS="lexicon-eg tsc-governance sources-and-citations bibliography 
       legacy-format website basic-concepts bettergedcom-snapshot"

# Static content to copy from website/
CONTENT="fhiso.css fhiso.png favicon.ico columnsort.js pdf.png robots.txt"
TRCONTENT="fhiso.css fhiso.png pdf.png"

if [ $# -eq 1 -a "$1" = '--help' ]; then
    cat <<EOF 
Usage: $(basename $0) [OPTION]

  --help      Display this message and exit
  --testing   Do not pull from git or deploy to the live server
  --deploy    Force the deployment of a dirty checkout to the live server

EOF
    exit;
fi

# 1.  Updates each git repository with a `git pull`.
DIRTY=""
if [ $# -ne 1 -o "$1" != '--testing' ]; then
    for REPO in $REPOS; do
        cd $ROOT/$REPO
        git pull -q
        if git status --porcelain | grep -q . ; then
            DIRTY="$DIRTY $REPO"
        fi
    done
fi

# 2.  Build a snapshot of the lexicon.
cd $ROOT/lexicon-eg/builder
rm -f lexicon-*.md
./mergemd.pl
ln -sf lexicon-$(TZ=UTC date +%Y-%m-%d).md snapshot.md

rm -rf $BUILD
mkdir -p $BUILD

# 3.  Generate the .htaccess file from the contents of `./htaccess/`.
(   echo "# *** This file is automatically generated.  Edits will be lost. ***"
    echo
    for file in $ROOT/website/htaccess/*; do 
        echo "# Copied from $file:"
        cat $file
        echo
    done 
) > $BUILD/.htaccess

# 4.  Install various static files (`png`s, `css`s, etc.).
for FILE in $CONTENT; do
    cp -p $ROOT/website/$FILE $BUILD/
done

mkdir -p $BUILD/TR
for FILE in $TRCONTENT; do
    cp -p $ROOT/website/$FILE $BUILD/TR/
done

rm -rf $ROOT/www-upload
mkdir $ROOT/www-upload

# 5.  Run `./build-site.pl` to generate HTML and PDF versions for all files 
#     listed in `tsc-governance/sitemap.xml` (and other `sitemap.xml` files
#     imported from that).
cd $ROOT/website
perl build-site.pl

# 6.  Install user management PHP code from `./include/` and `./account/`.  
rsync -rp include/ $BUILD/include/
rsync -rp account/ $BUILD/account/

# Extra redirects created by build-site.pl
if [ -e $BUILD/.redirects ] ; then
    (   echo "### Redirects generated by build-site.pl"
        echo
        cat $BUILD/.redirects ) >> $BUILD/.htaccess 
    rm $BUILD/.redirects
fi


# 7.  Install the CFPS PDF files, and populate its MySQL database.
mkdir -p $BUILD/cfps/files
rsync -rp cfps_processor/ready/ $BUILD/cfps/files/

# At the moment the database is built from the JSON file in git.
# This is a temporary arrangement while the old and new sites are 
# running in parallel.  This will trash and recreate the database.
./mysql.php < cfps_processor/schema.sql
./cfps_processor/import.php

if [ $# -eq 1 -a "$1" = '--testing' ]; then
    :
elif [ -z "$DIRTY" -o $# -eq 1 -a "$1" = '--deploy' ]; then
    # The code above will dump data in $BUILD and never touch the www root.
    # This is the only place where the main www root is populated.
    # The code used to do 
    #   rsync -rp $BUILD/ $OUT/
    # We no longer do that so as not to update the file mtime unnecessarily.
    find $BUILD/ -type d | sed "s#^$BUILD/#$OUT/#" | xargs -r mkdir -p
    find $BUILD/ -type f | while read NEW; do 
        OLD=$(echo "$NEW" | sed "s#www-build/#www/#")
        if ! cmp -s $OLD $NEW; then cp -p $NEW $OLD; fi
    done

    # Do remote updates on the main server 
    # This requires the existance of a ./main/enable file
    if [ -e ./main/enable ]; then
        # 8.  Upload an .htaccess file on the main server (`http://fhiso.org/`).
        # 9.  Upload PDF versions of governance documents to 
        #     `/files/governance/` on the main server.
        ./main/upload.pl

        # 10. Upload an HTML version of the bylaws and annual report to the 
        #     main server via the WordPress API.
        make -s -C ../tsc-governance board/by-laws.html \
            board/report-2018.html board/report-2019.html
        cat ../tsc-governance/board/by-laws.html \
	    | php ./main/wp-update.php bylaws governance/by-laws.pdf
        cat ../tsc-governance/board/report-2018.html \
	    | php ./main/wp-update.php report-2018 governance/report-2018.pdf
        cat ../tsc-governance/board/report-2019.html \
	    | php ./main/wp-update.php report-2019 governance/report-2019.pdf
        rm -f ../tsc-governance/board/by-laws.html \
              ../tsc-governance/board/report-2018.html
    fi
else
    cat <<EOF >&2
Not deploying a checkout with local modifications in these repositories:
 $DIRTY
Re-run with --deploy to force a deployment.
EOF
fi
